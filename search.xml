<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python：从视频中提取音频(使用MoviePy库 or ffmpeg+脚本批量下载)</title>
      <link href="/2019/11/18/python-mp4tomp3/"/>
      <url>/2019/11/18/python-mp4tomp3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用MoviePy库"><a href="#1-使用MoviePy库" class="headerlink" title="1.使用MoviePy库"></a>1.使用MoviePy库</h2><p>如官方文档所介绍的，moviepy是一个用于视频编辑Python库，可以切割、拼接、标题插入，视频合成（即非线性编辑），进行视频处理和自定义效果的设计。总的来说，可以很方便自由地处理视频、图片等文件。</p><h3 id="下载MoviePy库"><a href="#下载MoviePy库" class="headerlink" title="下载MoviePy库"></a>下载MoviePy库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install moviepy</span><br></pre></td></tr></table></figure><h3 id="最简单的操作-从mp4文件转换为mp3文件"><a href="#最简单的操作-从mp4文件转换为mp3文件" class="headerlink" title="最简单的操作(从mp4文件转换为mp3文件)"></a>最简单的操作(从mp4文件转换为mp3文件)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from moviepy.editor import *</span><br><span class="line"></span><br><span class="line">video = VideoFileClip(&apos;test.mp4&apos;)</span><br><span class="line">audio = video.audio</span><br><span class="line">audio.write_audiofile(&apos;test.mp3&apos;)</span><br></pre></td></tr></table></figure><h3 id="MoviePy支持的格式"><a href="#MoviePy支持的格式" class="headerlink" title="MoviePy支持的格式"></a>MoviePy支持的格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extensions_dict = &#123; &quot;mp4&quot;:  &#123;&apos;type&apos;:&apos;video&apos;, &apos;codec&apos;:[&apos;libx264&apos;,&apos;libmpeg4&apos;, &apos;aac&apos;]&#125;,</span><br><span class="line">                    &apos;ogv&apos;:  &#123;&apos;type&apos;:&apos;video&apos;, &apos;codec&apos;:[&apos;libtheora&apos;]&#125;,</span><br><span class="line">                    &apos;webm&apos;: &#123;&apos;type&apos;:&apos;video&apos;, &apos;codec&apos;:[&apos;libvpx&apos;]&#125;,</span><br><span class="line">                    &apos;avi&apos;:  &#123;&apos;type&apos;:&apos;video&apos;&#125;,</span><br><span class="line">                    &apos;mov&apos;:  &#123;&apos;type&apos;:&apos;video&apos;&#125;,</span><br><span class="line"></span><br><span class="line">                    &apos;ogg&apos;:  &#123;&apos;type&apos;:&apos;audio&apos;, &apos;codec&apos;:[&apos;libvorbis&apos;]&#125;,</span><br><span class="line">                    &apos;mp3&apos;:  &#123;&apos;type&apos;:&apos;audio&apos;, &apos;codec&apos;:[&apos;libmp3lame&apos;]&#125;,</span><br><span class="line">                    &apos;wav&apos;:  &#123;&apos;type&apos;:&apos;audio&apos;, &apos;codec&apos;:[&apos;pcm_s16le&apos;, &apos;pcm_s24le&apos;, &apos;pcm_s32le&apos;]&#125;,</span><br><span class="line">                    &apos;m4a&apos;:  &#123;&apos;type&apos;:&apos;audio&apos;, &apos;codec&apos;:[&apos;libfdk_aac&apos;]&#125;</span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MoviePy安装简便，上手友好；缺点是支持的格式少，批量操作困难</p><h2 id="2-ffmpeg-脚本批量下载"><a href="#2-ffmpeg-脚本批量下载" class="headerlink" title="2.ffmpeg+脚本批量下载"></a>2.ffmpeg+脚本批量下载</h2><p>ffmpeg是一个高效的跨平台视频和音频处理库，详细介绍和用法请见<a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">官网</a></p><h3 id="下载ffmpeg"><a href="#下载ffmpeg" class="headerlink" title="下载ffmpeg"></a>下载ffmpeg</h3><p>Ubuntu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ffmpeg</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lanchunhui/article/details/70477042" target="_blank" rel="noopener">Windows下载</a></p><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>脚本详情见<a href="https://www.infiniteft.xyz/2018/02/20/extract-audio-from-video-using-python-and-ffmpeg/" target="_blank" rel="noopener">这个网页</a></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>方便快捷，可以批量操作，但是<del>windows下载ffmpeg不友好</del></p><h2 id="3-其他方法"><a href="#3-其他方法" class="headerlink" title="3.其他方法"></a>3.其他方法</h2><p>dalao说可以放到pr里再保存，<del>对不起我的电脑带不动pr</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL 整理(vector, list, deque)</title>
      <link href="/2019/11/17/c-stl/"/>
      <url>/2019/11/17/c-stl/</url>
      
        <content type="html"><![CDATA[<p>C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。<br>&nbsp;</p><h2 id="Vector-向量"><a href="#Vector-向量" class="headerlink" title="Vector (向量)"></a>Vector (向量)</h2><p>vector（向量）: 是一种序列式容器，事实上和数组差不多，但它比数组更优越。一般来说数组不能动态拓展，因此在程序运行的时候不是浪费内存，就是造成越界。而vector正好弥补了这个缺陷，它的特征是相当于可分配拓展的数组（动态数组），它的随机访问快，在中间插入和删除慢，但在末端插入和删除快。<br>&nbsp;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec; <span class="comment">//// 创建一个向量存储 int</span></span><br><span class="line"></span><br><span class="line">vec.back(); <span class="comment">//传回最后一个数据，不检查这个数据是否存在</span></span><br><span class="line"></span><br><span class="line">vec.<span class="built_in">clear</span>(); <span class="comment">//移除容器中所有数据</span></span><br><span class="line"></span><br><span class="line">vec.empty(); <span class="comment">//判断容器是否为空</span></span><br><span class="line"></span><br><span class="line">vec.front(); <span class="comment">//传回第一个数据</span></span><br><span class="line"></span><br><span class="line">vec.pop_back(); <span class="comment">//删除最后一个数据</span></span><br><span class="line"></span><br><span class="line">vec.push_back(elem); <span class="comment">//在尾部加入一个数据</span></span><br><span class="line"></span><br><span class="line">vec[i]; <span class="comment">//等同于 vec.at(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器 iterator 访问值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator v = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>( v != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"value of v = "</span> &lt;&lt; *v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    v++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-双向链表"><a href="#List-双向链表" class="headerlink" title="List (双向链表)"></a>List (双向链表)</h2><p>List是一种序列式容器。list容器完成的功能实际上和数据结构中的双向链表是极其相似的，list中的数据元素是通过链表指针串连成逻辑意义上的线性表，也就是list也具有链表的主要优点，即：在链表的任一位置进行元素的插入、删除操作都是快速的。list的实现大概是这样的：list的每个节点有三个域：前驱元素指针域、数据域和后继元素指针域。前驱元素指针域保存了前驱元素的首地址；数据域则是本节点的数据；后继元素指针域则保存了后继元素的首地址。其实，list和循环链表也有相似的地方，即：头节点的前驱元素指针域保存的是链表中尾元素的首地址，list的尾节点的后继元素指针域则保存了头节点的首地址，这样，list实际上就构成了一个双向循环链。由于list元素节点并不要求在一段连续的内存中，显然在list中是不支持快速随机存取的，因此对于迭代器，只能通过“++”或“–”操作将迭代器移动到后继/前驱节点元素处。而不能对迭代器进行+n或-n的操作，这点，是与vector等不同的地方。</p><h3 id="数组和vector的区别"><a href="#数组和vector的区别" class="headerlink" title="数组和vector的区别"></a>数组和vector的区别</h3><p>数组：分配的是静态空间，一般分配了就不可以改变，就像我们熟知的定义了一个数组，那么数组的长度就不可以改变了，我们也不可以进行越界访问，但是编译器不检查越界，这一点在编程的时候要尤为注意。一般申请的数组长度不能满足我们的要求了，我们要重新申请大一点数组，然后把原数组中数据复制过来。</p><p>vector：分配的是动态空间，即：我们发现在声明vector容器的时候也可以不指定容器的大小，vector是随着元素的加入，空间自动扩展的。但是，我们必须要负责任的肯定vector分配的空间是连续的，也就是支持数组中的下标随机访问，实际上vector的实现机制是：预留一部分空间，而且预留空间的大小是按一定比率增长的，如果空间不够用的话，要保证连续，就必须重新new一片空间，然后将原有元素移动到新空间，同时预留新的空间（并且新分配的空间比原来分配的空间），最后将原来的那部分空间释放掉。这样预留空间的好处就是不用每次向vector中加元素都重新分配空间。</p><h3 id="构造和初始化"><a href="#构造和初始化" class="headerlink" title="构造和初始化"></a>构造和初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a(n);    <span class="comment">//声明一个n个元素的列表，每个元素都是0</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a(n, m);  <span class="comment">//声明一个n个元素的列表，每个元素都是m</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a(first, last);  <span class="comment">//声明一个列表，其元素的初始值来源于由区间所指定的序列中的元素，first和last是迭代器</span></span><br></pre></td></tr></table></figure><h3 id="添加、删除-front-back-push-front-push-back-pop-front-pop-back"><a href="#添加、删除-front-back-push-front-push-back-pop-front-pop-back" class="headerlink" title="添加、删除 (front, back, push_front, push_back, pop_front,   pop_back)"></a>添加、删除 (front, back, push_front, push_back, pop_front,   pop_back)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; list1&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">list1.front();    <span class="comment">//返回第一个元素的引用 </span></span><br><span class="line"><span class="keyword">int</span> nRet =list1.front(); <span class="comment">// nRet = 1</span></span><br><span class="line"></span><br><span class="line">list1.back();   <span class="comment">//返回最后一元素的引用 </span></span><br><span class="line"><span class="keyword">int</span> nRet =list1.back(); <span class="comment">// nRet = 3</span></span><br><span class="line"><span class="comment">//注意：当list元素为空时，这时候调用front()和back()不会报错。因此在编写程序时，最好先调用empty()函数判断list是否为空，再调用front()和back()函数。</span></span><br><span class="line"></span><br><span class="line">push_back();    <span class="comment">//增加一元素到链表尾 </span></span><br><span class="line">list1.push_back(<span class="number">4</span>); <span class="comment">//list1(1,2,3,4)</span></span><br><span class="line">push_front();   <span class="comment">//增加一元素到链表头 </span></span><br><span class="line">list1.push_front(<span class="number">4</span>);    <span class="comment">//list1(4,1,2,3)</span></span><br><span class="line"></span><br><span class="line">pop_back();    <span class="comment">//删除链表尾的一个元素 </span></span><br><span class="line">list1.pop_back();   <span class="comment">//list1(1,2)</span></span><br><span class="line">pop_front();    <span class="comment">//删除链表头的一元素 </span></span><br><span class="line">list1.pop_front();　 <span class="comment">//list1(2,3)</span></span><br><span class="line"><span class="comment">//注意：list必须不为空，如果当list为空的时候调用pop_back()和pop_front()会使程序崩掉。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clear</span>();    <span class="comment">//删除所有元素 </span></span><br><span class="line">list1.<span class="built_in">clear</span>(); <span class="comment">// list1空了,list1.size()=0</span></span><br></pre></td></tr></table></figure><h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 (insert)"></a>插入 (insert)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.insert(a.<span class="built_in">begin</span>(),<span class="number">100</span>);  <span class="comment">//在a的开始位置（即头部）插入100</span></span><br><span class="line">a.insert(a.<span class="built_in">begin</span>(),<span class="number">2</span>, <span class="number">100</span>);   <span class="comment">//在a的开始位置插入2个100</span></span><br><span class="line">a.insert(a.<span class="built_in">begin</span>(),b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());<span class="comment">//在a的开始位置插入b从开始到结束的所有位置的元素</span></span><br></pre></td></tr></table></figure><h3 id="删除一个元素或一个区域的元素-erase"><a href="#删除一个元素或一个区域的元素-erase" class="headerlink" title="删除一个元素或一个区域的元素 (erase)"></a>删除一个元素或一个区域的元素 (erase)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.erase(a.<span class="built_in">begin</span>());  <span class="comment">//将a的第一个元素删除</span></span><br><span class="line">a.erase(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());  <span class="comment">//将a的从begin()到end()之间的元素删除。</span></span><br></pre></td></tr></table></figure><h3 id="删除值相同的所有元素-remove"><a href="#删除值相同的所有元素-remove" class="headerlink" title="删除值相同的所有元素 (remove)"></a>删除值相同的所有元素 (remove)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">10</span>&#125;;</span><br><span class="line">a.<span class="built_in">remove</span>(<span class="number">7</span>);<span class="comment">//删除了a中所有值为7的元素，此时a中元素为6,8,9,10</span></span><br></pre></td></tr></table></figure><h3 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 (sort)"></a>排序 (sort)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.sort();  <span class="comment">//a(1,2,3)</span></span><br><span class="line">a.sort(great&lt;<span class="keyword">int</span>&gt;()); <span class="comment">//a(3,2,1)</span></span><br></pre></td></tr></table></figure><h3 id="扩展-resize"><a href="#扩展-resize" class="headerlink" title="扩展 (resize)"></a>扩展 (resize)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a.resize();    <span class="comment">//调用resize(n)将list的长度改为只容纳n个元素，超出的元素将被删除。如果n比list原来的长度长，那么默认超出的部分元素置为0</span></span><br><span class="line">a.resize(n, m);    <span class="comment">//将超出的部分赋值为m</span></span><br><span class="line"><span class="comment">//举例</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; b&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">b.resize(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//list中输出元素：1,2</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">b.resize(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//list中输出元素：1,2,3,4,0,0</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">b.resize(<span class="number">6</span>,<span class="number">9</span>);</span><br><span class="line"><span class="comment">//list中输出元素：1,2,3,4,9,9</span></span><br></pre></td></tr></table></figure><h3 id="交换-swap"><a href="#交换-swap" class="headerlink" title="交换 (swap)"></a>交换 (swap)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">swap(a, b);  <span class="comment">//或a.swap(b) 完成a链表和b链表的交换</span></span><br></pre></td></tr></table></figure><h3 id="逆置-reserve"><a href="#逆置-reserve" class="headerlink" title="逆置 (reserve)"></a>逆置 (reserve)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">reverse(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());    <span class="comment">//b中元素变为54321</span></span><br></pre></td></tr></table></figure><h3 id="合并-merge"><a href="#合并-merge" class="headerlink" title="合并 (merge)"></a>合并 (merge)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">a.merge(b,greater&lt;<span class="keyword">int</span>&gt;());    <span class="comment">//a中元素变为：6,7,8,9,2,1,3,6,5</span></span><br><span class="line"><span class="comment">//合并两个链表并使之默认升序</span></span><br></pre></td></tr></table></figure><h3 id="替换-assign"><a href="#替换-assign" class="headerlink" title="替换 (assign)"></a>替换 (assign)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*(1) a.assign(n, val):将a中的所有元素替换成n个val元素*/</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">b.assign(<span class="number">5</span>,<span class="number">10</span>);    <span class="comment">//b中的元素变为10, 10, 10, 10, 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*a.assign(b.begin(), b.end()):将b整体替换为a*/</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;a&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;b&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">b.assign(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());     <span class="comment">//b中的元素变为6,7,8,9</span></span><br></pre></td></tr></table></figure><h2 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque (双端队列)"></a>Deque (双端队列)</h2><p>deque（双端队列）是由一段一段的定量连续空间构成，可以向两端发展，因此不论在尾部或头部安插元素都十分迅速。 在中间部分安插元素则比较费时，因为必须移动其它元素。<br>实际上，deque是对vector和list优缺点的结合，它是处于两者之间的，一种优化了的对序列两端元素进行添加和删除操作的基本序列容器。<br>它允许较为快速地随机访问，但它不像vector把所有的对象保存在一块连续的内存块，而是采用多个连续的存储块，并且在一个映射结构中保存对这些块及其顺序的跟踪。向deque两端添加或删除元素的开销很小。它不需要重新分配空间，所以向末端增加元素比vector更有效。<br>特点：<br>(1)  随机访问方便，即支持[ ] 操作符和vector. at()，但性能没有vector好；<br>(2)  可以在内部进行插入和删除操作，但性能不及list；<br>(3)  可以在两端进行入列出列操作；<br>(4)  相对于verctor占用更多的内存。<br>&nbsp;</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; a; <span class="comment">// 定义一个int类型的双端队列a</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>); <span class="comment">// 定义一个int类型的双端队列a，并设置初始大小为10</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>, <span class="number">1</span>); <span class="comment">// 定义一个int类型的双端队列a，并设置初始大小为10且初始值都为1</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; b(a); <span class="comment">// 定义并用双端队列a初始化双端队列b</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; b(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>()+<span class="number">3</span>); <span class="comment">// 将双端队列a中从第0个到第2个(共3个)作为双端队列b的初始值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">//用数组初始化</span></span><br><span class="line"><span class="comment">// 将数组n的前5个元素作为双端队列a的初值</span></span><br><span class="line"><span class="comment">// 说明：当然不包括arr[4]元素，末尾指针都是指结束元素的下一个元素，</span></span><br><span class="line"><span class="comment">// 这个主要是为了和deque.end()指针统一。</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; a(n, n + <span class="number">5</span>); </span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; a(&amp;n[<span class="number">1</span>], &amp;n[<span class="number">4</span>]); <span class="comment">// 将n[1]、n[2]、n[3]作为双端队列a的初值</span></span><br></pre></td></tr></table></figure><h3 id="容量函数"><a href="#容量函数" class="headerlink" title="容量函数"></a>容量函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deq.<span class="built_in">size</span>();    <span class="comment">//容器大小</span></span><br><span class="line">deq.max_size();    <span class="comment">//容器最大容量</span></span><br><span class="line">deq.resize();      <span class="comment">//更改容器大小</span></span><br><span class="line">deq.empty();    <span class="comment">//容器判空</span></span><br><span class="line">deq.shrink_to_fit();    <span class="comment">//减少容器大小到满足元素所占存储空间的大小</span></span><br></pre></td></tr></table></figure><h3 id="添加函数"><a href="#添加函数" class="headerlink" title="添加函数"></a>添加函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deq.push_front(<span class="keyword">const</span> T&amp; x);    <span class="comment">//头部添加元素</span></span><br><span class="line">deq.push_back(<span class="keyword">const</span> T&amp; x);     <span class="comment">//末尾添加元素</span></span><br><span class="line">deq.insert(iterator it, <span class="keyword">const</span> T&amp; x);    <span class="comment">//任意位置插入一个元素</span></span><br><span class="line">deq.insert(iterator it, <span class="keyword">int</span> n, <span class="keyword">const</span> T&amp; x);    <span class="comment">//任意位置插入 n 个相同元素</span></span><br><span class="line">deq.insert(iterator it, iterator first, iterator last);    <span class="comment">//插入另一个向量的 [first,last] 间的数据</span></span><br></pre></td></tr></table></figure><h3 id="访问函数"><a href="#访问函数" class="headerlink" title="访问函数"></a>访问函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deq[<span class="number">1</span>]; <span class="comment">// 下标访问, 并不会检查是否越界</span></span><br><span class="line">deq.at(<span class="number">1</span>); <span class="comment">// at 方法访问, 以上两者的区别就是 at 会检查是否越界，是则抛出 out of range 异常</span></span><br><span class="line">deq.front();    <span class="comment">//访问第一个元素</span></span><br><span class="line">deq.back();    <span class="comment">//访问最后一个元素</span></span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">reverse(deq.<span class="built_in">begin</span>(), deq.<span class="built_in">end</span>());</span><br><span class="line">sort(deq.<span class="built_in">begin</span>(), deq.<span class="built_in">end</span>()); <span class="comment">// 采用的是从小到大的排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想从大到小排序，可以采用先排序后反转的方式，也可以采用下面方法:</span></span><br><span class="line"><span class="comment">// 自定义从大到小的比较器，用来改变排序方式</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Comp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">sort(deq.<span class="built_in">begin</span>(), deq.<span class="built_in">end</span>(), Comp);</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="三者对比"><a href="#三者对比" class="headerlink" title="三者对比"></a>三者对比</h2><p>vector： vector和built-in数组类似，拥有一段连续的内存空间，能非常好的支持随即存取，即[]操作符，但由于它的内存空间是连续的，所以在中间进行插入和删除会造成内存块的拷贝，另外，当插入较多的元素后，预留内存空间可能不够，需要重新申请一块足够大的内存并把原来的数据拷贝到新的内存空间。这些影响了vector的效率，但是实际上用的最多的还是vector容器，建议大多数时候使用vector效率一般是不错的。</p><p>list： list就是数据结构中的双向链表(根据sgi stl源代码)，因此它的内存空间是不连续的，通过指针来进行数据的访问，这个特点使得它的随即存取变的非常没有效率，因此它没有提供[]操作符的重载。但由于链表的特点，它可以以很好的效率支持任意地方的删除和插入。</p><p>deque： deque是一个double-ended queue，它的具体实现不太清楚，但知道它具有以下两个特点：它支持[]操作符，也就是支持随即存取，并且和vector的效率相差无几，它支持在两端的操作：push_back,push_front,pop_back,pop_front等，并且在两端操作上与list的效率也差不多。</p><p>因此在实际使用时，如何选择这三个容器中哪一个，应根据你的需要而定，具体可以遵循下面的原则：</p><ol><li>如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector</li><li>如果你需要大量的插入和删除，而不关心随即存取，则应使用list</li><li>如果你需要随即存取，而且关心两端数据的插入和删除，则应使用deque。</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python：you-get下载各大视频网站的在线视频</title>
      <link href="/2019/11/13/pythonyou-get%E4%B8%8B%E8%BD%BD%E5%90%84%E5%A4%A7%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91/"/>
      <url>/2019/11/13/pythonyou-get%E4%B8%8B%E8%BD%BD%E5%90%84%E5%A4%A7%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;<br>you-get这个工具可以下载主流视频网站的所有视频(不包括VIP专享)，且速度较快</p><h4 id="Step1：-安装python3环境"><a href="#Step1：-安装python3环境" class="headerlink" title="Step1： 安装python3环境"></a>Step1： 安装python3环境</h4><p>&nbsp;</p><h4 id="Step2：-装库"><a href="#Step2：-装库" class="headerlink" title="Step2： 装库"></a>Step2： 装库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install you-get</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="Step3-查看视频相关参数"><a href="#Step3-查看视频相关参数" class="headerlink" title="Step3:查看视频相关参数"></a>Step3:查看视频相关参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get -i [URL]    #查看视频相关参数</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h4 id="Step4：下载"><a href="#Step4：下载" class="headerlink" title="Step4：下载"></a>Step4：下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you-get [URL]   #下载到默认路径</span><br><span class="line">you-get -o C:\Users\think\Downloads [URL]   #根据需要选择存储文件路径方便查找</span><br><span class="line">you-get --format=列表中的一种格式 -o C:\Users\think\Downloads [URL]    #选择特定格式</span><br></pre></td></tr></table></figure><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 常用语法（持续更新）</title>
      <link href="/2019/11/11/hexo-commands/"/>
      <url>/2019/11/11/hexo-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g   #安装Hexo</span><br><span class="line">npm update hexo -g    #升级 </span><br><span class="line">hexo init             #初始化博客</span><br></pre></td></tr></table></figure><p>&emsp;</p><h3 id="常用命令简写"><a href="#常用命令简写" class="headerlink" title="常用命令简写"></a>常用命令简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;  #新建文章</span><br><span class="line">hexo g == hexo generate                  #生成</span><br><span class="line">hexo s == hexo server                    #启动服务预览</span><br><span class="line">hexo d == hexo deploy                    #部署</span><br></pre></td></tr></table></figure><p>&emsp;</p><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo server         #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s      #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean          #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><p>&emsp;</p><h3 id="将本地网页上传到git"><a href="#将本地网页上传到git" class="headerlink" title="将本地网页上传到git"></a>将本地网页上传到git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,World</title>
      <link href="/2019/11/11/Hello-World-0/"/>
      <url>/2019/11/11/Hello-World-0/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello，World"><a href="#Hello，World" class="headerlink" title="Hello，World"></a>Hello，World</h2><p>萌新的第一篇博客，希望我能成为一个笔耕不辍的博主qwq</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
